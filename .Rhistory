library(githubinstall)
install.packages("githubinstall")
runExample("01_hello")
library(shiny)
runExample("01_hello")
shiny::runApp('R')
runApp('R')
library(devtools)
library(roxygen2)
load_all()
runApp('R')
default_dbPath="~/Desktop/seqdb_hulab.rds
default_dbPath="~/Desktop/seqdb_hulab.rds"
runApp('R')
db <<- readRDS(default_dbPath)
runApp('R')
default_dbPath="~/Desktop/seqdb_hulab.rds"
runApp('R')
source('~/Documents/Scripts/R/shinySeqDB/R/shinySeqDB.R', echo=TRUE)
load_all()
runApp('R')
load_all()
runshinySeqDB()
runApp('R')
load_all()
runshinySeqDB()
library(shinySeqDB)
runshinySeqDB()
# all packages needed were imported here
library(shiny)
library(shinydashboard)
library(shinyjs)
library(shinyalert)
library(stringr)
library(readr)
library(rlist)
library(dplyr)
library(ggplot2)
library(tidyr)
library(DT)
library(plotly)
# all packages needed were imported here
library(shiny)
library(shinydashboard)
library(shinyjs)
library(shinyalert)
library(stringr)
library(readr)
library(rlist)
library(dplyr)
library(ggplot2)
library(tidyr)
library(DT)
library(plotly)
# options setting here
# maxium upload size
options(shiny.maxRequestSize=100*1024^2)
runApp('R')
default_dbPath="~/Desktop/seqdb_hulab.rds"
runApp('R')
!(T,F)
!(T, F)
!c(T, F)
runApp('R')
admin_password <- "delete"
runApp('R')
admin_password
runApp('R')
admin_password
"de"="de"
"de"=="de"
runApp('R')
load_all()
library(devtools)
load_all()
runshinySeqDB()
library(shinySeqDB)
runshinySeqDB()
# all packages needed were imported here
library(shiny)
library(shinydashboard)
default_dbPath="~/Desktop/seqdb_hulab.rds"
# all packages needed were imported here
library(shiny)
library(shinydashboard)
library(shinyjs)
library(shinyalert)
library(stringr)
library(readr)
library(rlist)
library(dplyr)
library(ggplot2)
library(tidyr)
library(DT)
library(plotly)
# options setting here
# maxium upload size
options(shiny.maxRequestSize=100*1024^2)
admin_password <- "delete"
runApp('R')
wrap_format
str_wrap("as.character(x)", width=5)
str_wrap("as character(x)", width=5)
string_wrap <- function(x) {
x %>%
str_extract_all(".{3}|.{0,2}$") %>%
`[[`(1) %>%
str_c(collapse="\n") %>%
writeLines()
}
string_wrap("sdadwsdasdqwds")
string_wrap <- function(string, len=8) {
string %>%
str_extract_all(".{3}|.{0,2}$") %>%
`[[`(1) %>%
str_c(collapse="\n") %>%
writeLines()
}
string_wrap("sdadwsdasdqwds")
string_wrap <- function(string, len=8) {
string %>%
str_extract_all(".{len}|.{0,2}$") %>%
`[[`(1) %>%
str_c(collapse="\n") %>%
writeLines()
}
string_wrap("sdadwsdasdqwds")
string %>%
str_extract_all(".{8}|.{0,2}$") %>%
`[[`(1) %>%
str_c(collapse="\n") %>%
writeLines()
string %>%
str_extract_all(".{8}|.{0,2}$") %>%
`[[`(1) %>%
str_c(collapse="\n") %>%
writeLines()
string_wrap <- function(string, len=8) {
string %>%
str_extract_all(".{8}|.{0,2}$") %>%
`[[`(1) %>%
str_c(collapse="\n") %>%
writeLines()
}
string_wrap("sdadwsdasdqwds")
strwrap
strwrap("asdfasdfasd")
strwrap("asdfasdfasd", 3)
strwrap("asdfas df asd", 3)
label_wrap_gen()
label_wrap_gen(10)
label_wrap_gen("asdfsadf",10)
string_wrap <- function(string) {
string %>%
str_extract_all(".{8}|.{0,7}$") %>%  # length = 8
`[[`(1) %>%
str_c(collapse="\n") %>%
writeLines()
}
string_wrap("asdfasdfsdagrehwte")
string_wrap("asdfasdfsdagrehwteadsf")
string_wrap("asdfasdfsdagrehwteadsfad")
string_wrap("asdfasdfsdagrehwteadsfadadf")
len=8
paste0(".{", len, "|.{0,", len-1, "}$")
paste0(".{", len, "}|.{0,", len-1, "}$")
string_wrap <- function(string, len=8) {
string %>%
str_extract_all(paste0(".{", len, "}|.{0,", len-1, "}$")) %>%
#str_extract_all(".{8}|.{0,7}$") %>%  # length = 8
`[[`(1) %>%
str_c(collapse="\n") %>%
writeLines()
}
string_wrap("asdfwefwef")
string_wrap("asdfwefwef"， 2)
string_wrap("asdfwefwef"， len=2)
string_wrap("asdfwefwef"， len=4)
string_wrap("asdfwefwef"，len=4)
string_wrap <- function(string, len=8) {
string %>%
str_extract_all(paste0(".{", len, "}|.{0,", len-1, "}$")) %>%
#str_extract_all(".{8}|.{0,7}$") %>%  # length = 8
`[[`(1) %>%
str_c(collapse="\n") %>%
writeLines()
}
string_wrap("asdfwefwef"，len=4)
string_wrap("asdfwefwef")
string_wrap <- function(string, len=5) {
string %>%
str_extract_all(paste0(".{", len, "}|.{0,", len-1, "}$")) %>%
#str_extract_all(".{8}|.{0,7}$") %>%  # length = 8
`[[`(1) %>%
str_c(collapse="\n") %>%
writeLines()
}
string_wrap("asdfwefwef")
string_wrap <- function(string, len=5) {
string %>%
as.character() %>%
str_extract_all(paste0(".{", len, "}|.{0,", len-1, "}$")) %>%
`[[`(1) %>%
str_c(collapse="\n") %>%
writeLines()
}
string_wrap("asdf", 3)
string_wrap <- function(string, len=5) {
string %>%
as.character() %>%
str_extract_all(paste0(".{", len, "}|.{0,", len-1, "}$")) %>%
`[[`(1) %>%
str_c(collapse="\n") %>%
writeLines()
}
runApp('R')
string_wrap <- function(string, len=10) {
string %>%
as.character() %>%
str_extract_all(paste0(".{", len, "}|.{0,", len-1, "}$")) %>%
`[[`(1) %>%
str_c(collapse="\n") %>%
writeLines()
}
x <- string_wrap("asdgfasg")
x <- string_wrap("asdgfasgasdfew")
cat(x)
string_wrap <- function(string, len=10) {
string %>%
as.character() %>%
str_extract_all(paste0(".{", len, "}|.{0,", len-1, "}$")) %>%
`[[`(1) %>%
str_c(collapse="\n") %>%
as.character()
}
string_wrap("asgerwgre")
string %>%
as.character() %>%
str_extract_all(paste0(".{", len, "}|.{0,", len-1, "}$")) %>%
`[[`(1) %>%
str_c(collapse="\n")
string_wrap <- function(string, len=10) {
string %>%
as.character() %>%
str_extract_all(paste0(".{", len, "}|.{0,", len-1, "}$")) %>%
`[[`(1) %>%
str_c(collapse="\n")
}
string_wrap("asgerwgre")
runApp('R')
string_wrap("Smart seq")
string_wrap("Smart seq2")
string_wrap("Smart seq2_lysate")
string_wrap <- function(string, len=10) {
string %>%
as.character() %>%
str_extract_all(paste0(".{", len, "}|.{0,", len-1, "}$")) %>%
`[[`(1) %>%
str_c(collapse="\n")
}
string_wrap(c("Smart seq2_lysate", "bluk-seq ng"))
string_wrap <- function(stringlist, len=10) {
re_s <- c()
for(i in stringlist){
re <- i %>%
as.character() %>%
str_extract_all(paste0(".{", len, "}|.{0,", len-1, "}$")) %>%
`[[`(1) %>%
str_c(collapse="\n")
re_s <- c(re_s, re)
}
string_wrap(c("Smart seq2_lysate", "bluk-seq ng"))
x <- string_wrap(c("Smart seq2_lysate", "bluk-seq ng"))
x
string_wrap <- function(stringlist, len=10) {
re_s <- c()
for(i in stringlist){
re <- i %>%
as.character() %>%
str_extract_all(paste0(".{", len, "}|.{0,", len-1, "}$")) %>%
`[[`(1) %>%
str_c(collapse="\n")
print(re)
re_s <- c(re_s, re)
}
x <- string_wrap(c("Smart seq2_lysate", "bluk-seq ng"))
string_wrap <- function(stringlist, len=10) {
re_s <- c()
for(i in stringlist){
re <- i %>%
as.character() %>%
str_extract_all(paste0(".{", len, "}|.{0,", len-1, "}$")) %>%
`[[`(1) %>%
str_c(collapse="\n")
print(re)
re_s <- c(re_s, re)
}
return(re_s)
}
x <- string_wrap(c("Smart seq2_lysate", "bluk-seq ng"))
x
string_wrap <- function(stringlist, len=10) {
re_s <- c()
for(i in stringlist){
re <- i %>%
as.character() %>%
str_extract_all(paste0(".{", len, "}|.{0,", len-1, "}$")) %>%
`[[`(1) %>%
str_c(collapse="\n")
print(re)
re_s <- c(re_s, re)
}
return(re_s)
}
runApp('R')
library(shinySeqDB)
library(roxyg)
library("roxygen2", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
document()
roxygen2()
library(roxygen2)
roxygen2()
library(devtools)
library(roxygen2)
document()
library(shinySeqDB)
load_all()
document()
load_all()
document()
library(shinySeqDB)
runshinySeqDB()
# all packages needed were imported here
library(shiny)
library(shinydashboard)
library(shinyjs)
library(shinyalert)
library(stringr)
library(readr)
library(rlist)
library(dplyr)
library(ggplot2)
library(tidyr)
library(DT)
library(plotly)
# options setting here
# maxium upload size
options(shiny.maxRequestSize=100*1024^2)
admin_password <- "delete"
string_wrap <- function(stringlist, len=10) {
re_s <- c()
for(i in stringlist){
re <- i %>%
as.character() %>%
str_extract_all(paste0(".{", len, "}|.{0,", len-1, "}$")) %>%
`[[`(1) %>%
str_c(collapse="\n")
re_s <- c(re_s, re) }
return(re_s)
}
runshinySeqDB()
remove.packages("shinySeqDB")
library(shinySeqDB)
runshinySeqDB()
here::dr_here()
here()
library(here)
here()
dirname("/Users/hh/Documents/Scripts/R/shinySeqDB")
new_dataset_expr_data <- read_xlsx("/Users/hh/Desktop/2018-11-29_gene_expr.xlsx", sheet=1) %>%
dplyr::select(-entrezgene, -entrezid, -type, -bio_type, -description)
packages <- c(
"readxl",
"shiny",
"shinydashboard",
"shinyjs",
"shinyalert",
"stringr",
"readr",
"rlist",
"dplyr",
"ggplot2",
"tidyr",
"DT",
"plotly"
)
# load packages
sapply(packages, function(x) require(x, character.only=T))
new_dataset_expr_data <- read_xlsx("/Users/hh/Desktop/2018-11-29_gene_expr.xlsx", sheet=1) %>%
dplyr::select(-entrezgene, -entrezid, -type, -bio_type, -description)
new_dataset_expr_data
c("entrezgene", "enterzid", "type", "bio_type", "description") %in%  colnames(new_dataset_expr_data)
new_dataset_expr_data <- read_xlsx(new_dataset_expr_path, sheet=1)
new_dataset_expr_data <- read_xlsx("/Users/hh/Desktop/2018-11-29_gene_expr.xlsx", sheet=1)
c("entrezgene", "enterzid", "type", "bio_type", "description") %in%  colnames(new_dataset_expr_data)
attr <- c("entrezgene", "enterzid", "type", "bio_type", "description", "name")
attr[attr %in%  colnames(new_dataset_expr_data)]
discard_column <- attr[attr %in%  colnames(new_dataset_expr_data)]
which(attr %in%  colnames(new_dataset_expr_data))
discard_column <- which(attr %in%  colnames(new_dataset_expr_data))
dplyr::select(new_dataset_expr_data, -discard_column)
attr <- c("entrezgene", "enterzid", "type", "bio_type", "description", "name")
discard_column <- which(attr %in%  colnames(new_dataset_expr_data))
dplyr::select(new_dataset_expr_data, -discard_column)
new_dataset_expr_data
discard_column
discard_column <- which(colnames(new_dataset_expr_data) %in% attr)
dplyr::select(new_dataset_expr_data, -discard_column)
limma::alias2Symbol("ctgf")
limma::alias2Symbol("Ctgf")
limma::alias2Symbol("Ctgf", "mm")
library(org.Mm.eg.db)
limma::alias2Symbol("Ctgf", "mm")
limma::alias2Symbol("Ctgf", "Mm")
limma::alias2Symbol("Ctgf", "Mm", expand.symbols=T)
limma::alias2Symbol("Ctgf", "Hs", expand.symbols=T)
limma::alias2Symbol("CTGF", "Hs", expand.symbols=T)
limma::alias2Symbol("CTGF", "Hs")
limma::alias2Symbol("CCN2", "Hs")
cowplot::theme_cowplot()
runApp()
# all packages needed were imported here
packages <- c(
"readxl",
"shiny",
"shinydashboard",
"shinyjs",
"shinyalert",
"stringr",
"readr",
"rlist",
"dplyr",
"ggplot2",
"tidyr",
"DT",
"plotly"
)
#################################################
# options setting here
# maxium upload size
options(shiny.maxRequestSize=100*1024^2)
admin_password <- "delete"
port <- 5000
default_dbPath <- "seqdb_hulab.rda"
#################################################
# install missing packages
packages_no_install <- setdiff(packages, as.data.frame(installed.packages())$Package)
if(!length(packages_no_install)==0) {
print("Install missing packges ...")
sapply(packages_no_install, function(x) install.packages(x))
print("Install packges complete")
}
# load packages
sapply(packages, function(x) require(x, character.only=T))
string_wrap <- function(stringlist, len=10) {
re_s <- c()
for(i in stringlist){
re <- i %>%
as.character() %>%
str_extract_all(paste0(".{", len, "}|.{0,", len-1, "}$")) %>%
`[[`(1) %>%
str_c(collapse="\n")
re_s <- c(re_s, re) }
return(re_s)
}
source("ui.R")
source("server.R")
print(paste0("Working directory was: ", getwd()))
print(paste0(Sys.Date(),(": Start shinySeqDB ...")))
app <- shinyApp(ui, server)
runApp(app, host="0.0.0.0", port=port)
source("ui.R")
source("server.R")
print(paste0("Working directory was: ", getwd()))
print(paste0(Sys.Date(),(": Start shinySeqDB ...")))
app <- shinyApp(ui, server)
runApp(app, host="0.0.0.0", port=port)
setwd("~/Documents/Scripts/R/shinySeqDB")
libr
library(usethis)
create_package(getwd())
